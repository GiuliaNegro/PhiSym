# cfg for phi symmetry calibration
# from ALCARAW applying laser corrections
#

import FWCore.ParameterSet.Config as cms

process=cms.Process("PHISYM")

process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_condDBv2_cff')
process.load('Configuration.Geometry.GeometryExtended2015Reco_cff')
process.load('Configuration.StandardSequences.L1Reco_cff')
process.load('Configuration.StandardSequences.RAWTODIGI')
process.load('RecoLocalCalo.EcalRecProducers.ecalMultiFitUncalibRecHit_cfi')
process.load('RecoLocalCalo.EcalRecProducers.ecalUncalibRecHit_cfi')
process.load('RecoLocalCalo.EcalRecProducers.ecalRecHit_cfi')

process.load('FWCore/MessageService/MessageLogger_cfi')
process.MessageLogger.cerr.FwkReport.reportEvery = 1000
process.MessageLogger.cerr.default = cms.untracked.PSet(
    limit = cms.untracked.int32(10000000),
    reportEvery = cms.untracked.int32(5000)
    )

process.source = cms.Source("PoolSource",
                            fileNames = cms.untracked.vstring('/store/data/Run2012A/AlCaPhiSym/RAW/v1/000/190/482/D08E58E5-4B7F-E111-8BBD-003048D2C0F4.root')
                           )

process.maxEvents = cms.untracked.PSet(
                                       input = cms.untracked.int32(-1)
                                       )


isStream=False
runMultiFit=True
#runMultiFit=False
#isBX50ns=False
isBX50ns=True

if (runMultiFit):
    if (isBX50ns):
        process.ecalMultiFitUncalibRecHit.algoPSet = cms.PSet(
                                             useLumiInfoRunHeader = cms.bool(False),
                                             activeBXs = cms.vint32(-4,-2,0,2,4)
                                                 )
    else:
        process.ecalMultiFitUncalibRecHit.algoPSet = cms.PSet(
                                             useLumiInfoRunHeader = cms.bool(False),
                                             activeBXs = cms.vint32(-5,-4,-3,-2,-1,0,1,2,3,4)
                                                 ) 

#ecalUncalibRecHit
if (isStream):
    process.ecalUncalibRecHit.EBdigiCollection = cms.InputTag("HLTEcalPhiSymFilter","phiSymEcalDigisEB")
    process.ecalUncalibRecHit.EEdigiCollection = cms.InputTag("HLTEcalPhiSymFilter","phiSymEcalDigisEE")

#ecalMultiFitUncalibRecHit
if (isStream):
    process.ecalMultiFitUncalibRecHit.EBdigiCollection = cms.InputTag("HLTEcalPhiSymFilter","phiSymEcalDigisEB")
    process.ecalMultiFitUncalibRecHit.EEdigiCollection = cms.InputTag("HLTEcalPhiSymFilter","phiSymEcalDigisEE")

#ecalRecHit (no ricovery)
process.ecalRecHit.killDeadChannels = cms.bool( False )
process.ecalRecHit.recoverEBVFE = cms.bool( False )
process.ecalRecHit.recoverEEVFE = cms.bool( False )
process.ecalRecHit.recoverEBFE = cms.bool( False )
process.ecalRecHit.recoverEEFE = cms.bool( False )
process.ecalRecHit.recoverEEIsolatedChannels = cms.bool( False )
process.ecalRecHit.recoverEBIsolatedChannels = cms.bool( False )
if (not runMultiFit):
    process.ecalRecHit.EBuncalibRecHitCollection = cms.InputTag("ecalUncalibRecHit","EcalUncalibRecHitsEB")
    process.ecalRecHit.EEuncalibRecHitCollection = cms.InputTag("ecalUncalibRecHit","EcalUncalibRecHitsEE")

process.phisymcalib = cms.EDAnalyzer("PhiSymmetryCalibration",
                                     ecalRecHitsProducer = cms.string("ecalRecHit"),
                                     barrelHitCollection = cms.string("EcalRecHitsEB"),
                                     endcapHitCollection = cms.string("EcalRecHitsEE"),
                                     #eCut_barrel = cms.double(0.550),                                              
                                     eCut_barrel = cms.double(1.3*10.*0.04),
                                     #eCut_barrel = cms.double(1.3*9.*0.04),
                                     #eCut_barrel = cms.double(1.3*8.*0.04),
                                     ap = cms.double( -0.150),
                                     b  = cms.double(  0.600),
                                     nNoise = cms.double(10.),
                                     #nNoise = cms.double(9.),
                                     #nNoise = cms.double(8.),
                                     eventSet = cms.int32(1),
                                     statusThreshold = cms.untracked.int32(0)
                                     )


# the xml file must be put in 
# $CMSSW_BASE/src/CalibCalorimetry/CaloMiscalibTools/data

process.GlobalTag.globaltag = 'GLOBALTAG'
process.GlobalTag.toGet = cms.VPSet(
 	   
    cms.PSet(record = cms.string("EcalIntercalibConstantsRcd"),
             tag = cms.string("EcalIntercalibConstantsMC_mc"),
             connect = cms.untracked.string("frontier://FrontierProd/CMS_COND_31X_ECAL") 
             )
)

if (not runMultiFit):
    process.reconstruction_step = cms.Sequence( process.ecalUncalibRecHit + process.ecalRecHit )
else:
    process.reconstruction_step = cms.Sequence( process.ecalMultiFitUncalibRecHit + process.ecalRecHit )

if (isStream):
    process.p = cms.Path(process.reconstruction_step)
    process.p *= process.phisymcalib
else:
    process.p = cms.Path(process.RawToDigi) 
    process.p *= process.L1Reco
    process.p *= process.reconstruction_step
    process.p *= process.phisymcalib
 
